name: Cypress regression tests
on: 
  workflow_dispatch:
    inputs:
      use_tag:
        description: 'Do you want to use a tag?'
        required: true
        type: choice
        options:
          - 'yes'
          - 'no'
      tag:
        description: 'Select the test suite to run (only if using tags)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - smoke
          - e2e
      spec:
        description: 'Specific test file to run (e.g., Login.cy.js)'
        required: false
        default: ''


jobs:
  cypress-run-regression:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # Cache Cypress binary
      - name: Cache Cypress binary
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: cypress-binary-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            cypress-binary-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install reportlab

      - name: Generate test invoice
        run: python cypress/generate_test_invoice.py

      - name: Install dependencies
        run: pnpm install

      # Explicitly install and verify Cypress
      - name: Install Cypress
        run: npx cypress install

      - name: Verify Cypress
        run: npx cypress verify

      - name: Create test runner script
        run: |
          cat << 'EOF' > run-tests.js
          const { spawnSync } = require('child_process');
          const path = require('path');

          const useTag = process.env.USE_TAG;
          const spec = process.env.CYPRESS_SPEC;
          const tag = process.env.CYPRESS_TAG;

          function runCypress(options = []) {
            console.log('Running Cypress with options:', options.join(' '));
            
            const result = spawnSync('npx', ['cypress', 'run', '--browser', 'chrome', ...options], {
              stdio: 'inherit',
              encoding: 'utf-8'
            });

            if (result.error) {
              console.error('Error running Cypress:', result.error);
              process.exit(1);
            }

            return result.status;
          }

          try {
            if (useTag === 'yes' && !tag) {
              console.error('Error: Tag selection is required when use_tag is "yes"');
              process.exit(1);
            }

            let exitCode;
            
            if (spec) {
              const specPath = path.join('cypress', 'e2e', 'tests_codegaia', spec);
              exitCode = runCypress(['--spec', specPath]);
            } else if (useTag === 'yes') {
              exitCode = runCypress(['--env', `TAG=${tag}`]);
            } else {
              exitCode = runCypress();
            }

            process.exit(exitCode);
          } catch (error) {
            console.error('Unexpected error:', error);
            process.exit(1);
          }
          EOF

      - name: Run Cypress with tag or file
        uses: cypress-io/github-action@v6
        id: cypress
        env:
          USE_TAG: ${{ github.event.inputs.use_tag }}
          CYPRESS_SPEC: ${{ github.event.inputs.spec }}
          CYPRESS_TAG: ${{ github.event.inputs.tag }}
        with:
          browser: chrome
          install: false # Skip installation as we've already installed
          command: node run-tests.js
        
      # after the test run completes store videos and any screenshots
      - name: uploading artifacts
        uses: actions/upload-artifact@v4
        # add the line below to store screenshots only on failures
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`
      - name: uploading report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-execution-report
          path: cypress/report

      # to send a report in slack      
      - name: Send Slack notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: '#epractice-automation'
          SLACK_WEBHOOK: ${{ secrets.SLACK_CYPRESS_WEBHOOK }}
          SLACK_COLOR: ${{ steps.cypress.outcome == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Cypress Regression Tests Results
          SLACK_MESSAGE: "Test run ${{ steps.cypress.outcome == 'success' && 'passed ✅' || 'failed ❌' }}"
          SLACK_FOOTER: 'Molly Storm Web App'